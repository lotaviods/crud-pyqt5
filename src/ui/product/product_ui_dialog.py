# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainScreen.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from controller.product_controller import ProductController
from typing import Callable, List
from model.product import Product
from ui.edit_product.edit_product_ui_dialog import EditProductUiDialog
from ui.constants import ACTION_DELETE, ACTION_EDIT


class ProductUiDialog(QtWidgets.QMainWindow):

    def __init__(self, controller: ProductController) -> None:
        super(ProductUiDialog, self).__init__()
        self.pControl = controller
        pass

    def setupUi(self, Window):
        Window.setObjectName("Dialog")
        Window.resize(638, 360)
        self.gridLayout = QtWidgets.QGridLayout(Window)
        self.gridLayout.setObjectName("gridLayout")
        self.widget = QtWidgets.QWidget(Window)
        self.widget.setObjectName("widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setSizeConstraint(
            QtWidgets.QLayout.SetDefaultConstraint)  # type: ignore
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_2.addWidget(self.lineEdit)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.line = QtWidgets.QFrame(self.widget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.nameLabel = QtWidgets.QLabel(self.widget)
        self.nameLabel.setObjectName("nameLabel")
        self.horizontalLayout.addWidget(self.nameLabel)
        self.nameLineEdit = QtWidgets.QLineEdit(self.widget)
        self.nameLineEdit.setObjectName("nameLineEdit")
        self.horizontalLayout.addWidget(self.nameLineEdit)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.priceLabel = QtWidgets.QLabel(self.widget)
        self.priceLabel.setObjectName("priceLabel")
        self.horizontalLayout_3.addWidget(self.priceLabel)
        self.priceLineEdit = QtWidgets.QLineEdit(self.widget)
        self.priceLineEdit.setObjectName("priceLineEdit")
        self.horizontalLayout_3.addWidget(self.priceLineEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.inStockLabel = QtWidgets.QLabel(self.widget)
        self.inStockLabel.setObjectName("inStockLabel")
        self.horizontalLayout_4.addWidget(self.inStockLabel)
        self.inStockLineEdit_3 = QtWidgets.QLineEdit(self.widget)
        self.inStockLineEdit_3.setObjectName("inStockLineEdit_3")
        self.horizontalLayout_4.addWidget(self.inStockLineEdit_3)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.productListView = QtWidgets.QListWidget(self.widget)
        self.productListView.setStyleSheet("")
        self.productListView.setObjectName("productListView")
        self.productListView.viewport().installEventFilter(self)
        self.gridLayout_2.addWidget(self.productListView, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.widget, 0, 0, 1, 1)
        self.pushButton_2.clicked.connect(self.onSerchButtonClick)
        self.pushButton.clicked.connect(self.onInsertButtonClick)

        wid = QtWidgets.QWidget(self)
        self.setCentralWidget(wid)
        layout = QtWidgets.QVBoxLayout()
        wid.setLayout(layout)

        self.retranslateUi(Window)
        QtCore.QMetaObject.connectSlotsByName(Window)

        self.retranslateUi(Window)
        QtCore.QMetaObject.connectSlotsByName(Window)

    def retranslateUi(self, Window):
        _translate = QtCore.QCoreApplication.translate
        Window.setWindowTitle(_translate("Window", "Adicionar produto"))
        self.label.setText(_translate("Window", "Pesquisa:"))
        self.pushButton_2.setText(_translate("Window", "Ok"))
        self.nameLabel.setText(_translate("Window", "Nome:"))
        self.priceLabel.setText(_translate("Window", "Preço:"))
        self.inStockLabel.setText(_translate("Window", "Em estoque:"))
        self.pushButton.setText(_translate("Window", "Adicionar"))
        self.listAllProductsInView(self.productListView)

    def listAllProductsInView(self, view: QtWidgets.QListWidget):
        view.clear()
        items = self.pControl.getAllProducts()
        self.addProducts(view, items)

    def addProducts(self, view: QtWidgets.QListWidget, products: List[Product]):
        for i in products:
            view.addItem(
                str(f"ID: {i.id}\n Produto: {i.name}\nPreço: {i.price} \nEstoque: {i.stock}\n---------------------")
            )

    def eventFilter(self, source, event):
        if(source is self.productListView):
            return False
        if(event.type() == None):
            return False

        menuType = QtCore.QEvent.ContextMenu  # type: ignore
        clickType = QtCore.QEvent.MouseButtonDblClick  # type: ignore

        if(event.type() == clickType):
            position = self.productListView.indexAt(event.pos()).row()
            self.openEditDialog(self.pControl.products[position])
            return True

        if (event.type() == menuType):
            self.createContextMenuForProductItem(
                source, event, self.onItemAction)
            return True

        return super(ProductUiDialog, self).eventFilter(source, event)

    def onSerchButtonClick(self):
        text = self.lineEdit.text()

        result = self.pControl.serchText(text)

        self.productListView.clear()

        self.addProducts(self.productListView, result)
        pass

    def onItemAction(self, action: QtWidgets.QAction, index: int):
        try:
            if(action.text() == ACTION_EDIT):
                self.openEditDialog(self.pControl.products[index])
                return
            if(action.text() == ACTION_DELETE):
                itemRemoved = self.pControl.removeProduct(index)

                if(itemRemoved):
                    self.listAllProductsInView(self.productListView)
                return
        except:
            pass

        return

    def onInsertButtonClick(self):
        self.insertProductByInput()
        self.listAllProductsInView(self.productListView)

    def openEditDialog(self, product=Product("", "", "")):
        dialog = QtWidgets.QDialog()
        ui = EditProductUiDialog(product, lambda editedProduct : (
            self.onProductEdited(product, editedProduct)
        ))  
        ui.setupUi(dialog)
        dialog.ui = ui
        dialog.setAttribute(QtCore.Qt.WA_DeleteOnClose)  # type: ignore

        dialog.exec()

    def onProductEdited(self, product: Product, editedProduct: Product): 
        self.pControl.editProduct(product.id, editedProduct)
        self.listAllProductsInView(self.productListView)
        return None

    def createContextMenuForProductItem(
        self,
        _: QtWidgets.QListWidget, event,
        onActionItemClick: Callable[
            [QtWidgets.QAction, int], None
        ] = lambda _, __: None
    ):
        menu = QtWidgets.QMenu()
        deleteAction = QtWidgets.QAction(ACTION_DELETE)
        editAction = QtWidgets.QAction(ACTION_EDIT)

        menu.addActions([editAction, deleteAction])

        action = menu.exec(event.globalPos())
        position = self.productListView.indexAt(event.pos()).row()

        onActionItemClick(action, position)

    def insertProductByInput(self):
        self.pControl.insertNewProduct(
            name=self.nameLineEdit.text(),
            price=self.priceLineEdit.text(),
            inStock=self.inStockLineEdit_3.text()
        )
